<?xml version="1.0"?>
<!--
      This file is part of HMMoC 1.3, a hidden Markov model compiler.
      Copyright (C) 2007 by Gerton Lunter, Oxford University.
  
      HMMoC is free software; you can redistribute it and/or modify
      it under the terms of the GNU General Public License as published by
      the Free Software Foundation; either version 2 of the License, or
      (at your option) any later version.
  
      HMMOC is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU General Public License for more details.
  
      You should have received a copy of the GNU General Public License
      along with HMMoC; if not, write to the Free Software
      Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-->


<hml>



<author>Gerton Lunter</author>



<alphabet id="nucleotides">
  ACGT
</alphabet>



<emission id="sequence">
  <alphabet idref="nucleotides"/>
</emission>



<output id="sequence1">
 <alphabet idref="nucleotides"/>
 <identifier type="length" value="iLen1"/>
 <identifier type="sequence" value="iSequence1"/>
 <code type="parameter" value="const char* iSequence1"/>
 <code type="parameter" value="int iLen1"/>
</output>



<hmm id="GeneFinder">

 <description>  A rather naive gene finder, to show how to build a 'Generalized HMM'  </description>

 <outputs>
  <!-- Define number of emission 'tapes', and their alphabets -->
  <output idref="sequence1"/>
 </outputs>


 <clique id="block1">
  <state id="start"/>
 </clique>

 <!-- The cpgisland state must also be of order 1, otherwise the first output when coming 
      from the normal state cannot refer to the previous symbol. -->

 <clique id="block2">
  <state id="background" emission="emitbackground"/>
  <state id="startcodon" emission="emitstart"/>
  <state id="gene" emission="emitcodon"/>
  <state id="stop" emission="emitstop"/>
 </clique>

 <clique id="block3">
  <state id="end" emission="empty"/>
 </clique>

 <graph>
  <clique idref="block1"/>
  <clique idref="block2"/>
  <clique idref="block3"/>
 </graph>


  <emission id="emitbackground">
   <!--  This defines the emission distribution for non-genic sequence -->
   <output idref="sequence1"/>
   <probability>
    <code type="statement">
     <identifier type="result" value="iProb"/>
     <identifier output="sequence1" value="iSymb1"/>
     <code type="parameter" value="double* aEmission"/>
     <![CDATA[

     switch (iSymb1) {
         case 'A': iProb = aEmission[0]; break;
         case 'T': iProb = aEmission[1]; break;
         case 'C': iProb = aEmission[2]; break;
         case 'G': iProb = aEmission[3]; break;
         default: cout << "Error!" << endl;
	}

     ]]>
    </code>
   </probability>
  </emission>


  <emission id="emitstart">
   <!--  This emits a start codon -->
   <output idref="sequence1"/>
   <output idref="sequence1"/>
   <output idref="sequence1"/>
   <probability>
    <code type="statement">
     <identifier type="result" value="iProb"/>
     <identifier output="sequence1" value="iSymb1" height="0"/>  <!-- first symbol -->
     <identifier output="sequence1" value="iSymb2" height="1"/>  <!-- second symbol -->
     <identifier output="sequence1" value="iSymb3" height="2"/>  <!-- third symbol -->
     <![CDATA[

     if (iSymb1 == 'A' && iSymb2 == 'T' && iSymb3 == 'G')
       iProb = 1.0;
     else
       iProb = 0.0;

     ]]>
    </code>
   </probability>
  </emission>


  <emission id="emitstop">
   <!--  This emits a stop codon -->
   <output idref="sequence1"/>
   <output idref="sequence1"/>
   <output idref="sequence1"/>
   <probability>
    <code type="statement">
     <identifier type="result" value="iProb"/>
     <identifier output="sequence1" value="iSymb1" height="0"/>  <!-- first symbol -->
     <identifier output="sequence1" value="iSymb2" height="1"/>  <!-- second symbol -->
     <identifier output="sequence1" value="iSymb3" height="2"/>  <!-- third symbol -->
     <![CDATA[

     // TGA, TAA or TAG
     if ((iSymb1 == 'T')&&((iSymb2 == 'G' && iSymb3 == 'A') ||
		           (iSymb2 == 'A' && (iSymb3 == 'A' || iSymb3 == 'G'))))
	   iProb = 1.0/3.0;
     else
           iProb = 0.0;

     ]]>
    </code>
   </probability>
  </emission>


  <emission id="emitcodon">
   <!--  This emits a coding triplet -->
   <output idref="sequence1"/>
   <output idref="sequence1"/>
   <output idref="sequence1"/>
   <probability>
    <code type="statement">
     <identifier type="result" value="iProb"/>
     <identifier output="sequence1" value="iSymb1" height="0"/>  <!-- first symbol -->
     <identifier output="sequence1" value="iSymb2" height="1"/>  <!-- second symbol -->
     <identifier output="sequence1" value="iSymb3" height="2"/>  <!-- third symbol -->
     <![CDATA[

     // anything but Stop
     if ((iSymb1 == 'T')&&((iSymb2 == 'G' && iSymb3 == 'A') ||
		           (iSymb2 == 'A' && (iSymb3 == 'A' || iSymb3 == 'G'))))
	   iProb = 0.0;
     else
           iProb = 1.0/61.0;

     ]]>
    </code>
   </probability>
  </emission>
       
         
  <emission id="empty">
   <probability depends=""><code type="expression"><identifier output="sequence1"/> 1.0 </code></probability>
  </emission>


  <transitions>

  <transition from="start"      to="background" probability="full"     id="start-bg"/>
  <transition from="background" to="background" probability="bgbg"     id="bg-bg"/>    
  <transition from="background" to="startcodon" probability="bgstart"  id="bg-start"/>
  <transition from="background" to="end"        probability="bgend"    id="bg-end"/>
  <transition from="startcodon" to="gene"       probability="full"     id="start-gene"/>    
  <transition from="gene"       to="gene"       probability="extend"   id="gene-gene"/>
  <transition from="gene"       to="stop"       probability="genestop" id="gene-stop"/>
  <transition from="stop"       to="background" probability="full"     id="stop-bg"/>

  </transitions>


  <!-- Probabilities follow -->

  <probability id="full"><code> 1.0 </code></probability>

  <probability id="bgbg">
   <code>
     <code type="parameter" value="double iGeneDensity"/>
     <code type="parameter" value="double iGeneLength"/>
     1.0-0.0001-iGeneDensity
   </code>
  </probability>  

  <probability id="bgstart"> <code value="iGeneDensity"/> </probability>
  <probability id="bgend"> <code value="0.0001"/> </probability>
  <probability id="extend"> <code value="1.0-1.0/iGeneLength"/> </probability>
  <probability id="genestop"> <code value="1.0/iGeneLength"/> </probability>

</hmm>




<!-- Code generation -->


<forward outputTable="yes" name="Forward" id="fw">
  <hmm idref="GeneFinder"/>
</forward>

<backward outputTable="yes" baumWelch="yes" name="Backward" id="bw">
  <hmm idref="GeneFinder"/>
</backward>

<sample name="Sample" id="smp">
  <hmm idref="GeneFinder"/>
</sample>


<viterbi name="Viterbi" id="vit">
  <hmm idref="GeneFinder"/>
</viterbi>


<codeGeneration realtype="bfloat" file="genefinder.cc" header="genefinder.h" language="C++">

  <forward idref="fw"/>
  <backward idref="bw"/>
  <sample idref="smp"/>
  <viterbi idref="vit"/>

</codeGeneration>


</hml>
