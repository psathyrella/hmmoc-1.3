<?xml version="1.0"?>
<hml debug="no">

<alphabet id="nucleotides">
 0123
</alphabet>

<!--  Definition of the output "tapes"  -->
<output id="sequence">
 <alphabet idref="nucleotides"/>
 <identifier type="length" value="seq_length"/>
 <identifier type="sequence" value="sequence"/>
 <code type="parameter">
  <![CDATA[
     vector<char>& sequence
  ]]>
 </code>
</output>

<code id="initialise1" type="statement">
  <![CDATA[ int seq_length = sequence.size(); ]]>
</code>

<code id="initialise2" type="statement">
  <code type="parameter"> <![CDATA[
    map<stringXcommaXmap<stringXcommaXdouble> > transition_probs
  ]]> </code>
</code>

<!-- NOTE: hmmoc's parser barfs on the comma in map<string, vector<double> >, so I sed through and  -->
<!-- replace the XcommaX later (see makefile). TODO fix that shit. -->
 <probability id="honest_emission_prob">
  <code type="statement" init="initialise1">
    <identifier output="sequence" value="iSymb"/>
    <identifier type="result" value="iPP"/>
    <code type="parameter"> <![CDATA[ map<stringXcommaXvector<double> > emission_probs ]]> </code>
    <![CDATA[
      iPP = emission_probs["honest"][ iSymb - '0' ]; // convert char 'n' to int n
    ]]>
  </code>
</probability>
<probability id="dishonest_emission_prob">
  <code type="statement" init="initialise1">
    <identifier output="sequence" value="iSymb"/>
    <identifier type="result" value="iPP"/>
    <code type="parameter"> <![CDATA[ map<stringXcommaXvector<double> > emission_probs ]]> </code>
    <![CDATA[
      iPP = emission_probs["dishonest"][ iSymb - '0' ];
    ]]>
  </code>
</probability>

<probability id="prob_begin_honest">	    <code type="expression" init="initialise2"> transition_probs["begin"]["honest"]	  </code></probability>
<probability id="prob_begin_dishonest">	    <code type="expression" init="initialise2"> transition_probs["begin"]["dishonest"]	  </code></probability>
<probability id="prob_honest_honest">	    <code type="expression" init="initialise2"> transition_probs["honest"]["honest"]	  </code></probability>
<probability id="prob_honest_dishonest">    <code type="expression" init="initialise2"> transition_probs["honest"]["dishonest"]	  </code></probability>
<probability id="prob_dishonest_dishonest"> <code type="expression" init="initialise2"> transition_probs["dishonest"]["dishonest"]</code></probability>
<probability id="prob_dishonest_honest">    <code type="expression" init="initialise2"> transition_probs["dishonest"]["honest"]	  </code></probability>
<probability id="prob_honest_stop">	    <code type="expression" init="initialise2"> transition_probs["honest"]["stop"]	  </code></probability>
<probability id="prob_dishonest_stop">	    <code type="expression" init="initialise2"> transition_probs["dishonest"]["stop"]	  </code></probability>

<hmm id="SeqGen">
 <description> random sequence generator </description>
 <outputs id="outputs">
  <output idref="sequence"/>
 </outputs>
 <clique id="block1">
  <state id="begin"/>
 </clique>
 <clique id="block2">
  <state id="honest"/>
  <state id="dishonest"/>
 </clique>
 <clique id="block3">
  <state id="stop"/>
 </clique>
 <graph>
  <clique idref="block1"/>
  <clique idref="block2"/>
  <clique idref="block3"/>
 </graph>

  <emission id="honest_emission">
   <output idref="sequence"/>
   <probability idref="honest_emission_prob"/>
  </emission>
  <emission id="dishonest_emission">
   <output idref="sequence"/>
   <probability idref="dishonest_emission_prob"/>
  </emission>
  <emission id="empty">
   <probability>
    <code type="expression"> 1.0 </code>
   </probability>
  </emission>

  <transitions id="transitions">
  <transition id="begin_honest"         from="begin"     to="honest"    probability="prob_begin_honest"         emission="honest_emission"/>
  <transition id="begin_dishonest"      from="begin"     to="dishonest" probability="prob_begin_dishonest"      emission="dishonest_emission"/>
  <transition id="honest_honest"        from="honest"    to="honest"    probability="prob_honest_honest"        emission="honest_emission"/>
  <transition id="honest_dishonest"     from="honest"    to="dishonest" probability="prob_honest_dishonest"     emission="dishonest_emission"/>
  <transition id="dishonest_dishonest"  from="dishonest" to="dishonest" probability="prob_dishonest_dishonest"  emission="dishonest_emission"/>
  <transition id="dishonest_honest"     from="dishonest" to="honest"    probability="prob_dishonest_honest"     emission="honest_emission"/>
  <transition id="honest_stop"          from="honest"    to="stop"      probability="prob_honest_stop"          emission="empty"/>
  <transition id="dishonest_stop"       from="dishonest" to="stop"      probability="prob_dishonest_stop"       emission="empty"/>
  </transitions>
</hmm>

<hmm id="NESeqGen">
 <description> random sequence generator without emissions (for sampling) </description>
 <outputs/>
 <clique id="NEblock1">
  <state id="NEbegin"/>
 </clique>
 <clique id="NEblock2">
  <state id="NEhonest"/>
  <state id="NEdishonest"/>
 </clique>
 <clique id="NEblock3">
  <state id="NEstop"/>
 </clique>
 <graph>
  <clique idref="NEblock1"/>
  <clique idref="NEblock2"/>
  <clique idref="NEblock3"/>
 </graph>

  <emission id="NEempty">
   <probability>
    <code type="expression"> 1.0 </code>
   </probability>
  </emission>

  <transitions id="NEtransitions">
  <transition from="NEbegin"     to="NEhonest"    probability="prob_begin_honest" emission="NEempty"/>
  <transition from="NEbegin"     to="NEdishonest" probability="prob_begin_dishonest" emission="NEempty"/>
  <transition from="NEhonest"    to="NEhonest"    probability="prob_honest_honest" emission="NEempty"/>
  <transition from="NEhonest"    to="NEdishonest" probability="prob_honest_dishonest" emission="NEempty"/>
  <transition from="NEdishonest" to="NEdishonest" probability="prob_dishonest_dishonest" emission="NEempty"/>
  <transition from="NEdishonest" to="NEhonest"    probability="prob_dishonest_honest" emission="NEempty"/>
  <transition from="NEhonest"    to="NEstop"      probability="prob_honest_stop" emission="NEempty"/>
  <transition from="NEdishonest" to="NEstop"      probability="prob_dishonest_stop" emission="NEempty"/>
  </transitions>
</hmm>

<!-- Code generation -->
<!-- No emission hmm -->
<backward  outputTable="yes" name="NEBackward" id="nebw">
  <hmm idref="NESeqGen"/>
</backward>
<sample  name="NESample" id="nesmp">
  <hmm idref="NESeqGen"/>
</sample>
<!-- Regular emission hmm -->
<forward outputTable="yes" baumWelch="no" name="Forward" id="fw">
  <hmm idref="SeqGen"/>
</forward>
<backward outputTable="yes" baumWelch="yes" name="Backward" id="bw">
  <!-- NOTE: outputTable was "no" in the original example, and it seemed to work... but if it's "no" -->
  <!-- here it breaks the baum welch counters. I don't know why. -->
  <hmm idref="SeqGen"/>
</backward>
<viterbi name="Viterbi" id="vit" outputTable="yes">
  <hmm idref="SeqGen"/>
</viterbi>

<codeGeneration realtype="bfloat" file="aligner.cc" header="aligner.h" language="C++">
  <backward idref="nebw"/>
  <sample idref="nesmp"/>
  <forward idref="fw"/>
  <backward idref="bw"/>
  <viterbi idref="vit"/>
</codeGeneration>

</hml>
