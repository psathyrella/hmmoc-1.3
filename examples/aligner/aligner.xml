<?xml version="1.0"?>
<hml debug="yes">
<author> Gerton Lunter </author>

<alphabet id="nucleotides">
 ACGT
</alphabet>

<!--  Definition of the output "tapes"  -->
<output id="sequence">
 <alphabet idref="nucleotides"/>
 <identifier type="length" value="iLen"/>
 <identifier type="sequence" value="iSequence"/>
 <code type="parameter">
  <![CDATA[
     vector<char>& iSequence
  ]]>
 </code>
</output>

<code id="initialise1" type="statement">
  <![CDATA[

  int iLen = iSequence.size();

  unsigned char iTranslate[256];
  for (int i=0; i<256; i++) {
    iTranslate[i]= 0;
  }
  iTranslate[(unsigned)'A'] = 0;   // It is important that this is in alphabetical order, to
  iTranslate[(unsigned)'a'] = 0;   // make the indices correspond to those used for Baum-Welch
  iTranslate[(unsigned)'C'] = 1;
  iTranslate[(unsigned)'c'] = 1;
  iTranslate[(unsigned)'G'] = 2;
  iTranslate[(unsigned)'g'] = 2;
  iTranslate[(unsigned)'T'] = 3;
  iTranslate[(unsigned)'t'] = 3;
  ]]>
</code>

<code id="initialise2" type="statement">
  <code type="parameter"> double tau </code>    <!-- length parameter -->
  <code type="parameter"> double gamma1 </code> <!-- rate G1 to G2 -->
  <code type="parameter"> double gamma2 </code> <!-- rate G2 to G1 -->
  <![CDATA[

  map<string,double> m_trans; // transition matrix
  m_trans["BG1"]  = 1;
  m_trans["BG2"]  = 0;
  m_trans["G1G1"] = 1 - gamma1 - tau;
  m_trans["G1G2"] = gamma1;
  m_trans["G2G2"] = 1 - gamma2 - tau;
  m_trans["G2G1"] = gamma2;
  m_trans["G1S"]  = tau;
  m_trans["G2S"]  = tau;

  ]]>
</code>

<!-- <probability id="one"><code> 1.0 </code></probability> -->
<probability id="emissionProb1">
  <code type="statement" init="initialise1">
    <identifier output="sequence" value="iSymb"/>
    <identifier type="result" value="iPP"/>
    <code type="parameter"> <![CDATA[ vector<double> emit_probs_1 ]]> </code>
    <![CDATA[
      iPP = emit_probs_1[ iTranslate[ iSymb ] ];
    ]]>
  </code>
</probability>
<probability id="emissionProb2">
  <code type="statement" init="initialise1">
    <identifier output="sequence" value="iSymb"/>
    <identifier type="result" value="iPP"/>
    <code type="parameter"> <![CDATA[ vector<double> emit_probs_2 ]]> </code>
    <![CDATA[
      iPP = emit_probs_2[ iTranslate[ iSymb ] ];
    ]]>
  </code>
</probability>

<probability id="probBG1"><code  type="expression" init="initialise2"> m_trans["BG1"]  </code></probability>
<probability id="probBG2"><code  type="expression" init="initialise2"> m_trans["BG2"]  </code></probability>
<probability id="probG1G1"><code type="expression" init="initialise2"> m_trans["G1G1"] </code></probability>
<probability id="probG1G2"><code type="expression" init="initialise2"> m_trans["G1G2"] </code></probability>
<probability id="probG2G2"><code type="expression" init="initialise2"> m_trans["G2G2"] </code></probability>
<probability id="probG2G1"><code type="expression" init="initialise2"> m_trans["G2G1"] </code></probability>
<probability id="probG1S"><code  type="expression" init="initialise2"> m_trans["G1S"]  </code></probability>
<probability id="probG2S"><code  type="expression" init="initialise2"> m_trans["G2S"]  </code></probability>

<hmm id="SeqGen">
 <description> random sequence generator </description>
 <outputs id="outputs">
  <output idref="sequence"/>
 </outputs>
 <clique id="block1">
  <state id="begin"/>
 </clique>
 <clique id="block2">
  <state id="generate1"/>
  <state id="generate2"/>
 </clique>
 <clique id="block3">
  <state id="stop"/>
 </clique>
 <graph>
  <clique idref="block1"/>
  <clique idref="block2"/>
  <clique idref="block3"/>
 </graph>

  <emission id="emit1">
   <output idref="sequence"/>
   <probability idref="emissionProb1"/>
  </emission>
  <emission id="emit2">
   <output idref="sequence"/>
   <probability idref="emissionProb2"/>
  </emission>
  <emission id="empty">
   <probability>
    <code type="expression"> 1.0 </code>
   </probability>
  </emission>

  <transitions id="transitions">
  <transition id="trBG1"  from="begin"     to="generate1" probability="probBG1"  emission="emit1"/>
  <transition id="trBG2"  from="begin"     to="generate2" probability="probBG2"  emission="emit2"/>
  <transition id="trG1G1" from="generate1" to="generate1" probability="probG1G1" emission="emit1"/>
  <transition id="trG1G2" from="generate1" to="generate2" probability="probG1G2" emission="emit2"/>
  <transition id="trG2G2" from="generate2" to="generate2" probability="probG2G2" emission="emit2"/>
  <transition id="trG2G1" from="generate2" to="generate1" probability="probG2G1" emission="emit1"/>
  <transition id="trG1S"  from="generate1" to="stop"      probability="probG1S"   emission="empty"/>
  <transition id="trG2S"  from="generate2" to="stop"      probability="probG2S"   emission="empty"/>
  </transitions>
</hmm>

<hmm id="NESeqGen">
 <description> random sequence generator without emissions (for sampling) </description>
 <outputs/>
 <clique id="NEblock1">
  <state id="NEbegin"/>
 </clique>
 <clique id="NEblock2">
  <state id="NEgenerate1"/>
  <state id="NEgenerate2"/>
 </clique>
 <clique id="NEblock3">
  <state id="NEstop"/>
 </clique>
 <graph>
  <clique idref="NEblock1"/>
  <clique idref="NEblock2"/>
  <clique idref="NEblock3"/>
 </graph>

  <emission id="NEempty">
   <probability>
    <code type="expression"> 1.0 </code>
   </probability>
  </emission>

  <transitions id="NEtransitions">
  <transition from="NEbegin"     to="NEgenerate1" probability="probBG1"  emission="NEempty"/>
  <transition from="NEbegin"     to="NEgenerate2" probability="probBG2"  emission="NEempty"/>
  <transition from="NEgenerate1" to="NEgenerate1" probability="probG1G1" emission="NEempty"/>
  <transition from="NEgenerate1" to="NEgenerate2" probability="probG1G2" emission="NEempty"/>
  <transition from="NEgenerate2" to="NEgenerate2" probability="probG2G2" emission="NEempty"/>
  <transition from="NEgenerate2" to="NEgenerate1" probability="probG2G1" emission="NEempty"/>
  <transition from="NEgenerate1" to="NEstop"      probability="probG1S"  emission="NEempty"/>
  <transition from="NEgenerate2" to="NEstop"      probability="probG2S"  emission="NEempty"/>
  </transitions>
</hmm>

<!-- Code generation -->
<!-- No emission hmm -->
<backward  outputTable="yes" name="NEBackward" id="nebw">
  <hmm idref="NESeqGen"/>
</backward>
<sample  name="NESample" id="nesmp">
  <hmm idref="NESeqGen"/>
</sample>
<!-- Regular emission hmm -->
<forward outputTable="yes" baumWelch="no" name="Forward" id="fw">
  <hmm idref="SeqGen"/>
</forward>
<backward outputTable="yes" baumWelch="yes" name="Backward" id="bw">
  <!-- NOTE: outputTable was "no" in the original example, and it seemed to work... but if it's "no" -->
  <!-- here it breaks the baum welch counters. I don't know why. -->
  <hmm idref="SeqGen"/>
</backward>
<viterbi name="Viterbi" id="vit" outputTable="yes">
  <hmm idref="SeqGen"/>
</viterbi>

<codeGeneration realtype="bfloat" file="aligner.cc" header="aligner.h" language="C++">
  <backward idref="nebw"/>
  <sample idref="nesmp"/>
  <forward idref="fw"/>
  <backward idref="bw"/>
  <viterbi idref="vit"/>
</codeGeneration>

</hml>
