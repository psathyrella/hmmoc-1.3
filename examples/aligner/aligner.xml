<?xml version="1.0"?>
<!--
      This file is part of HMMoC 1.3, a hidden Markov model compiler.
      Copyright (C) 2007 by Gerton Lunter, Oxford University.
  
      HMMoC is free software; you can redistribute it and/or modify
      it under the terms of the GNU General Public License as published by
      the Free Software Foundation; either version 2 of the License, or
      (at your option) any later version.
  
      HMMOC is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU General Public License for more details.
  
      You should have received a copy of the GNU General Public License
      along with HMMoC; if not, write to the Free Software
      Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-->



<hml debug="yes">



<author> Gerton Lunter </author>



<!--  Definition of an emission alphabet  -->

<alphabet id="nucleotides">
 ACGT
</alphabet>




<!--  Definition of the output "tapes"  -->

<output id="sequence1" speed="0">

 <!-- 'speed=0' sets this sequence to be the fastest iterator (inner loop); make this the shortest sequence for best performance) -->

 <alphabet idref="nucleotides"/>

 <!-- Specify identifiers for sequence and sequence length, to be referred to in recursion -->
 <identifier type="length" value="iLen1"/>
 <identifier type="sequence" value="iSequence1"/>

 <!-- These identifiers need to be passed to the function, so specify them here as parameters.
      Because of the & character, we need a CDATA block to quote the text.  -->

 <code type="parameter">
  <![CDATA[
     vector<char>& iSequence1
  ]]>
 </code>

</output>



<output id="sequence2" speed="1">

 <!-- speed=1, make this the longest sequence for best performance -->
 <!-- The forward banding iterator must make this variable nondecreasing, and vice versa for the backward iterator -->
 <!-- Also, controls the order in which the coordinates appear in getPos() -->

 <alphabet idref="nucleotides"/>
 <identifier type="length" value="iLen2"/>
 <identifier type="sequence" value="iSequence2"/>

 <code type="parameter">
  <![CDATA[
     vector<char>& iSequence2
  ]]>
 </code>

</output>





<!-- Initialization clique to initialize the banding instance.
     This also makes sure that an #include line is added at the top of the .cc output file. -->

<code id="initialiseBanding" init="includeBandingHeader">

  MyBanding bandingInstance( iSequence1.size(), iSequence2.size(), iWidth );

  <code type="parameter" value="int iWidth"/>

</code>


<code id="includeBandingHeader" where="includes">

#include "mybanding.h"

</code>


 

<!--  Banding of clique 2 -->

<banding id="block2banding">
 <code init="initialiseBanding">

   bandingInstance

 </code>
 <code type="coordinate" output="sequence1" value="0"/>
 <code type="coordinate" output="sequence2" value="1"/>
</banding>





<code id="initialise1" type="statement">

  <!-- This initialisation block requires some input parameters: -->

  <code type="parameter" value="double iSigma"/>

  <!-- Actual initialisation block -->
  <![CDATA[

  int iLen1 = iSequence1.size();   // The sequence lengths are not passed as parameters, but are
  int iLen2 = iSequence2.size();   // computed from the vector<char> itself

/* Initialisation of the arrays iEquilibriumDistribution and iMatrix,
   according to a Jukes-Cantor model */

  double iEquilibriumDistribution[4];
  double iSubstitutionMatrix[4][4];
  unsigned char iTranslate[256];
  for (int i=0; i<256; i++) {
    iTranslate[i]= 0;
  }
  iTranslate[(unsigned)'A'] = 0;   // It is important that this is in alphabetical order, to
  iTranslate[(unsigned)'a'] = 0;   // make the indices correspond to those used for Baum-Welch
  iTranslate[(unsigned)'C'] = 1;
  iTranslate[(unsigned)'c'] = 1;
  iTranslate[(unsigned)'G'] = 2;
  iTranslate[(unsigned)'g'] = 2;
  iTranslate[(unsigned)'T'] = 3;
  iTranslate[(unsigned)'t'] = 3;

  for (int i=0; i<4; i++) {
    iEquilibriumDistribution[i] = 1/4.0;
    for (int j=0; j<4; j++) {
      if (i==j) {
        iSubstitutionMatrix[i][j] = 1/4.0 + (3/4.0)*exp(-4.0*iSigma/3.0);
      } else {
        iSubstitutionMatrix[i][j] = 1/4.0 - (1/4.0)*exp(-4.0*iSigma/3.0);
      }
    }
  }

  ]]>
</code>



<code id="initialise2" type="statement">

  <code type="parameter"> double iDelta </code>   <!-- insertion/deletion probability -->
  <code type="parameter"> double iTau   </code>   <!-- probability of going to the end state -->
  <code type="parameter"> double iR     </code>   <!-- indel length parameter ('gap extension probability') -->

  <![CDATA[

/* Initialisation of the iT transition-probability array */

  double iT[16];
  iT[0] = 1.0 - iDelta - iTau;    // MM  (Match-to-Match)
  iT[1] = iDelta/2;               // MI  (Match-to-Insert)
  iT[2] = iDelta/2;               // MD  (Match-to-Delete)
  iT[3] = iTau;                   // ME  (Match-to-End)
  iT[4] = iR;                     // II
  iT[5] = 1.0 - iR - iTau;        // IM
  iT[6] = 0;                      // ID
  iT[7] = iTau;                   // IE
  iT[8] = iR;                     // DD
  iT[9] = 1.0 - iR - iTau;        // DM
  iT[10]= 0;                      // DI
  iT[11]= iTau;                   // DE
  iT[12]= 1.0 - iDelta;           // SM  (Start-to-Match)
  iT[13]= iDelta/2;               // SI 
  iT[14]= iDelta/2;               // SD
  iT[15]= 0;                      // SE

  ]]>
</code>




<!--  
      Emission probabilities.  
      A number of input <identifier>s specify to which tapes this emission emits.
      An optional "output" attribute specifies the tape; when absent, the ordering of tapes in
       the defining HMM is used.
      An optional "depth" attribute specifies the lookback.  This is used for higher-order
       states.  Default is 0.  If it is used, use of the "output" attribute is required.
      Emission probabilities need not sum out to 1, e.g. when using transducers
       (conditionally normalized HMMs)
-->


<probability id="singleEmissionProb1">

  <!-- Code to compute emission probability, for a single emission.  A single input is needed.
       The code is a statement so a result identifier is given too -->

  <code type="statement" init="initialise1">
    <identifier output="sequence1" value="iSymb"/>
    <identifier type="result" value="iPP"/>
    <![CDATA[

      iPP = iEquilibriumDistribution[ iTranslate[ iSymb ] ];

    ]]>
  </code>
</probability>


<probability id="singleEmissionProb2">
  <!-- Code to compute emission probability, for a single emission.  A single input is needed.
       The code is a statement so a result identifier is given too -->
  <code type="statement" init="initialise1">
    <identifier output="sequence2" value="iSymb"/>
    <identifier type="result" value="iPP"/>
    <![CDATA[

      iPP = iEquilibriumDistribution[ iTranslate[ iSymb ] ];

    ]]>
  </code>
</probability>



<probability id="doubleEmissionProb">
  <code type="statement" init="initialise1">
    <identifier output="sequence1"> iSymb1 </identifier>
    <identifier output="sequence2"> iSymb2 </identifier>
    <identifier type="result"> iPP </identifier>
    <![CDATA[

      iPP = iEquilibriumDistribution[ iTranslate[ iSymb1 ] ] * (iSubstitutionMatrix[ iTranslate[ iSymb1 ] ])[ iTranslate[ iSymb2 ] ];

    ]]>
  </code>
</probability>



<probability id="probMM"><code type="expression" init="initialise2"> iT[0] </code></probability>
<probability id="probMI"><code type="expression" init="initialise2"> iT[1] </code></probability>
<probability id="probMD"><code type="expression" init="initialise2"> iT[2] </code></probability>
<probability id="probME"><code type="expression" init="initialise2"> iT[3] </code></probability>
<probability id="probII"><code type="expression" init="initialise2"> iT[4] </code></probability>
<probability id="probIM"><code type="expression" init="initialise2"> iT[5] </code></probability>
<probability id="probID"><code type="expression" init="initialise2"> iT[6] </code></probability>
<probability id="probIE"><code type="expression" init="initialise2"> iT[7] </code></probability>
<probability id="probDD"><code type="expression" init="initialise2"> iT[8] </code></probability>
<probability id="probDM"><code type="expression" init="initialise2"> iT[9] </code></probability>
<probability id="probDI"><code type="expression" init="initialise2"> iT[10] </code></probability>
<probability id="probDE"><code type="expression" init="initialise2"> iT[11] </code></probability>
<probability id="probSM"><code type="expression" init="initialise2"> iT[12] </code></probability>
<probability id="probSI"><code type="expression" init="initialise2"> iT[13] </code></probability>
<probability id="probSD"><code type="expression" init="initialise2"> iT[14] </code></probability>
<probability id="probSE"><code type="expression" init="initialise2"> iT[15] </code></probability>



<hmm id="AlignWithBanding">

 <description>  Simple probabilistic pairwise sequence aligner, with banding  </description>


 <outputs id="outputs">
  <!-- Define number of emissions and their ordering -->
  <output idref="sequence1"/>
  <output idref="sequence2"/>
 </outputs>


 <!--  Defines "blocks", i.e. subgraphs that are non-cyclic with respect to each other -->


 <clique id="block1">
  <state id="start" emission="empty"/>
 </clique>

 <clique id="block2withbanding">
  <banding idref="block2banding"/>
  <state id="match"/>
  <state id="insert"/>
  <state id="delete"/>
 </clique>

 <clique id="block3">
  <state id="end"/>
 </clique>


 <graph>
  <clique idref="block1"/>
  <clique idref="block2withbanding"/>
  <clique idref="block3"/>
 </graph>


  <!--  Define all emissions for this HMM; relates output tape and code that calculates probabilities  -->


  <emission id="emit12">
   <output idref="sequence1"/>
   <output idref="sequence2"/>
   <probability idref="doubleEmissionProb"/>
  </emission>

  <emission id="emit1">
   <output idref="sequence1"/>
   <probability idref="singleEmissionProb1"/>
  </emission>

  <emission id="emit2">
   <output idref="sequence2"/>
   <probability idref="singleEmissionProb2"/>
  </emission>

  <emission id="empty">
   <probability><code type="expression"> 1.0 </code></probability>
  </emission>



  <!--  Define all transitions: "from" and "to" states, transition probability, and emission  
        It is permissible to assign emissions to states (see the end state).  In this case,
        all transitions going to that state should have no "emission" attribute.   
   -->
  

  <transitions id="transitions">
  <transition id="trSE" from="start"  to="end"    probability="probSE" emission="empty"/>
  <transition id="trSM" from="start"  to="match"  probability="probSM" emission="emit12"/>
  <transition id="trSI" from="start"  to="insert" probability="probSI" emission="emit1"/>
  <transition id="trSD" from="start"  to="delete" probability="probSD" emission="emit2"/>

  <transition id="trMM" from="match"  to="match"  probability="probMM" emission="emit12"/>
  <transition id="trMI" from="match"  to="insert" probability="probMI" emission="emit1"/>
  <transition id="trMD" from="match"  to="delete" probability="probMD" emission="emit2"/>
  <transition id="trME" from="match"  to="end"    probability="probME" emission="empty"/>

  <transition id="trIM" from="insert" to="match"  probability="probIM" emission="emit12"/>
  <transition id="trII" from="insert" to="insert" probability="probII" emission="emit1"/>
  <transition id="trID" from="insert" to="delete" probability="probID" emission="emit2"/>
  <transition id="trIE" from="insert" to="end"    probability="probIE" emission="empty"/>

  <transition id="trDM" from="delete" to="match"  probability="probDM" emission="emit12"/>
  <transition id="trDI" from="delete" to="insert" probability="probDI" emission="emit1"/>
  <transition id="trDD" from="delete" to="delete" probability="probDD" emission="emit2"/>
  <transition id="trDE" from="delete" to="end"    probability="probDE" emission="empty"/>

  </transitions>

</hmm>



<hmm id="Align">

 <description>  Simple probabilistic pairwise sequence aligner  </description>


 <outputs idref="outputs"/>


 <!-- Re-define clique 2, this time without banding. -->
 <clique id="block2">
  <state idref="match"/>
  <state idref="insert"/>
  <state idref="delete"/>
 </clique>


 <graph>
  <clique idref="block1"/>
  <clique idref="block2"/>
  <clique idref="block3"/>
 </graph>


  <transitions idref="transitions"/>

</hmm>



<!-- Code generation -->



<forward outputTable="yes" baumWelch="no" name="Forward" id="fw">

  <!-- Specify HMM to make code for -->
  <hmm idref="Align"/>

</forward>

<backward outputTable="no" baumWelch="transitions" name="BackwardBaumWelch" id="bwbw">

  <!-- Specify HMM to make code for -->
  <hmm idref="Align"/>

</backward>


<backward outputTable="yes" baumWelch="no" name="Backward" id="bw">

  <!-- Specify HMM to make code for -->
  <hmm idref="Align"/>

</backward>


<sample name="Sample" id="smp">

  <hmm idref="Align"/>

</sample>


<viterbi name="Viterbi" id="vit">

  <hmm idref="Align"/>

</viterbi>


<forward outputTable="yes" baumWelch="no" name="ForwardBanding" id="fwbanding" cacheValues="yes">

  <!-- Specify HMM to make code for -->
  <hmm idref="AlignWithBanding"/>
  <code idref="SparseDPTable"/>

</forward>


<backward outputTable="no" baumWelch="transitions" name="BackwardBaumWelchBanding" id="bwbwbanding" cacheValues="yes">

  <!-- Specify HMM to make code for -->
  <hmm idref="AlignWithBanding"/>
  <code idref="SparseDPTable"/>

</backward>


<backward outputTable="yes" baumWelch="no" name="BackwardBanding" id="bwbanding" cacheValues="yes">

  <!-- Specify HMM to make code for -->
  <hmm idref="AlignWithBanding"/>
  <code idref="SparseDPTable"/>

</backward>


<sample name="SampleBanding" id="smpbanding">

  <hmm idref="AlignWithBanding"/>
  <code idref="SparseDPTable"/>

</sample>


<viterbi name="ViterbiBanding" id="vitbanding">

  <hmm idref="AlignWithBanding"/>
  <code idref="SparseDPTable"/>

</viterbi>




<codeGeneration realtype="bfloat" file="aligner.cc" header="aligner.h" language="C++">

  <forward idref="fw"/>
  <backward idref="bwbw"/>
  <backward idref="bw"/>
  <sample idref="smp"/>
  <viterbi idref="vit"/>

  <forward idref="fwbanding"/>
  <backward idref="bwbwbanding"/>
  <backward idref="bwbanding"/>
  <sample idref="smpbanding"/>
  <viterbi idref="vitbanding"/>

</codeGeneration>

 

</hml>


